import type { NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import { useState } from "react";
import { Wishlist } from "@prisma/client";
import Image from "next/image";
import { WishlistPost } from "../components/wishlist-post/WishlistPost";
import { WishlistEntryCard } from "../components/wishlist-entry-card/WishlistEntryCard";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <WishlistPost /> */}
      {/* <WishlistEntryCard /> */}
      {/* <AuthShowcase /> */}
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const [value, setValue] = useState("");
  const utils = trpc.useContext();

  const { data: sessionData } = useSession();

  const { data: user } = trpc.user.getUserById.useQuery(
    sessionData?.user?.id ?? "",
    { enabled: !!sessionData?.user?.id }
  );

  const { data: wishlists } = trpc.wishlist.getAllByUserId.useQuery(
    { userId: user?.id ?? "" },
    { enabled: !!user?.id }
  );

  const { mutate: handleCreateWishlist } =
    trpc.wishlist.createWishlist.useMutation({
      onSuccess: () => {
        setValue("");
        utils.wishlist.getAllByUserId.invalidate();
      },
    });

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <p className="text-2xl text-blue-500">Logged in as {user?.name}</p>
      )}
      <button
        className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
      {sessionData && (
        <>
          <button
            disabled={value ? false : true}
            className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100 disabled:bg-slate-400"
            onClick={() => {
              handleCreateWishlist({ name: value, userId: user?.id ?? "" });
            }}
          >
            Create wishlist
          </button>
          <input
            className="my-4 bg-slate-100 p-4"
            placeholder="Wishlist name"
            value={value}
            onChange={(e) => setValue(e.target.value)}
          />
          {wishlists?.map((wishlist) => (
            <WishlistCard key={wishlist.id} {...wishlist} />
          ))}
        </>
      )}
    </div>
  );
};

const WishlistCard = (wishlist: Wishlist) => {
  const utils = trpc.useContext();
  const { mutate: deleteWishlist } = trpc.wishlist.deleteWishlist.useMutation({
    onSuccess: () => {
      utils.wishlist.getAllByUserId.invalidate();
    },
  });

  const { data: users } = trpc.wishlist.retrieveAllUsers.useQuery({
    wishlistId: wishlist.id,
  });

  return (
    <div
      key={wishlist.id}
      className="flex flex-col items-start gap-2 rounded-md border-2 border-solid border-slate-200 bg-slate-50 p-4"
    >
      <h2>{wishlist.name}</h2>
      <div>
        {users?.map((user) => (
          <Image
            className="rounded-full"
            key={user.id}
            src={user.image ?? ""}
            width={40}
            height={40}
            alt={user.email ?? ""}
          />
        ))}
      </div>
      <button
        onClick={() => deleteWishlist({ id: wishlist.id })}
        className="bg-rose-400 p-2 text-rose-700"
      >
        Delete
      </button>
    </div>
  );
};

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="m-auto mt-3 w-fit text-sm text-violet-500 underline decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};
