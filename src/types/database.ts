/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/user_wishlist": {
    get: {
      parameters: {
        query: {
          userId?: parameters["rowFilter.user_wishlist.userId"];
          wishlistId?: parameters["rowFilter.user_wishlist.wishlistId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_wishlist"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_wishlist */
          user_wishlist?: definitions["user_wishlist"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          userId?: parameters["rowFilter.user_wishlist.userId"];
          wishlistId?: parameters["rowFilter.user_wishlist.wishlistId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          userId?: parameters["rowFilter.user_wishlist.userId"];
          wishlistId?: parameters["rowFilter.user_wishlist.wishlistId"];
        };
        body: {
          /** user_wishlist */
          user_wishlist?: definitions["user_wishlist"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/wishlists": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.wishlists.id"];
          created_at?: parameters["rowFilter.wishlists.created_at"];
          name?: parameters["rowFilter.wishlists.name"];
          created_by?: parameters["rowFilter.wishlists.created_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["wishlists"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** wishlists */
          wishlists?: definitions["wishlists"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.wishlists.id"];
          created_at?: parameters["rowFilter.wishlists.created_at"];
          name?: parameters["rowFilter.wishlists.name"];
          created_by?: parameters["rowFilter.wishlists.created_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.wishlists.id"];
          created_at?: parameters["rowFilter.wishlists.created_at"];
          name?: parameters["rowFilter.wishlists.name"];
          created_by?: parameters["rowFilter.wishlists.created_by"];
        };
        body: {
          /** wishlists */
          wishlists?: definitions["wishlists"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/wishlist_post": {
    get: {
      parameters: {
        query: {
          wishlistId?: parameters["rowFilter.wishlist_post.wishlistId"];
          postId?: parameters["rowFilter.wishlist_post.postId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["wishlist_post"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** wishlist_post */
          wishlist_post?: definitions["wishlist_post"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          wishlistId?: parameters["rowFilter.wishlist_post.wishlistId"];
          postId?: parameters["rowFilter.wishlist_post.postId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          wishlistId?: parameters["rowFilter.wishlist_post.wishlistId"];
          postId?: parameters["rowFilter.wishlist_post.postId"];
        };
        body: {
          /** wishlist_post */
          wishlist_post?: definitions["wishlist_post"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/posts_claimed": {
    get: {
      parameters: {
        query: {
          userId?: parameters["rowFilter.posts_claimed.userId"];
          postId?: parameters["rowFilter.posts_claimed.postId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["posts_claimed"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** posts_claimed */
          posts_claimed?: definitions["posts_claimed"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          userId?: parameters["rowFilter.posts_claimed.userId"];
          postId?: parameters["rowFilter.posts_claimed.postId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          userId?: parameters["rowFilter.posts_claimed.userId"];
          postId?: parameters["rowFilter.posts_claimed.postId"];
        };
        body: {
          /** posts_claimed */
          posts_claimed?: definitions["posts_claimed"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          email?: parameters["rowFilter.users.email"];
          name?: parameters["rowFilter.users.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          email?: parameters["rowFilter.users.email"];
          name?: parameters["rowFilter.users.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          email?: parameters["rowFilter.users.email"];
          name?: parameters["rowFilter.users.name"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/posts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts.id"];
          created_at?: parameters["rowFilter.posts.created_at"];
          name?: parameters["rowFilter.posts.name"];
          created_by?: parameters["rowFilter.posts.created_by"];
          price?: parameters["rowFilter.posts.price"];
          url?: parameters["rowFilter.posts.url"];
          description?: parameters["rowFilter.posts.description"];
          is_favorited?: parameters["rowFilter.posts.is_favorited"];
          is_purchased?: parameters["rowFilter.posts.is_purchased"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["posts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** posts */
          posts?: definitions["posts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts.id"];
          created_at?: parameters["rowFilter.posts.created_at"];
          name?: parameters["rowFilter.posts.name"];
          created_by?: parameters["rowFilter.posts.created_by"];
          price?: parameters["rowFilter.posts.price"];
          url?: parameters["rowFilter.posts.url"];
          description?: parameters["rowFilter.posts.description"];
          is_favorited?: parameters["rowFilter.posts.is_favorited"];
          is_purchased?: parameters["rowFilter.posts.is_purchased"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.posts.id"];
          created_at?: parameters["rowFilter.posts.created_at"];
          name?: parameters["rowFilter.posts.name"];
          created_by?: parameters["rowFilter.posts.created_by"];
          price?: parameters["rowFilter.posts.price"];
          url?: parameters["rowFilter.posts.url"];
          description?: parameters["rowFilter.posts.description"];
          is_favorited?: parameters["rowFilter.posts.is_favorited"];
          is_purchased?: parameters["rowFilter.posts.is_purchased"];
        };
        body: {
          /** posts */
          posts?: definitions["posts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_post": {
    get: {
      parameters: {
        query: {
          userId?: parameters["rowFilter.user_post.userId"];
          postId?: parameters["rowFilter.user_post.postId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_post"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_post */
          user_post?: definitions["user_post"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          userId?: parameters["rowFilter.user_post.userId"];
          postId?: parameters["rowFilter.user_post.postId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          userId?: parameters["rowFilter.user_post.userId"];
          postId?: parameters["rowFilter.user_post.postId"];
        };
        body: {
          /** user_post */
          user_post?: definitions["user_post"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  user_wishlist: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    userId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `wishlists.id`.<fk table='wishlists' column='id'/>
     */
    wishlistId: string;
  };
  wishlists: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    created_by?: string;
  };
  wishlist_post: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `wishlists.id`.<fk table='wishlists' column='id'/>
     */
    wishlistId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `posts.id`.<fk table='posts' column='id'/>
     */
    postId: string;
  };
  posts_claimed: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    userId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `posts.id`.<fk table='posts' column='id'/>
     */
    postId: string;
  };
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    name?: string;
  };
  posts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    name?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    created_by?: string;
    /** Format: text */
    price?: string;
    /** Format: text */
    url?: string;
    /** Format: text */
    description?: string;
    /**
     * Format: boolean
     * @default false
     */
    is_favorited?: boolean;
    /**
     * Format: boolean
     * @default false
     */
    is_purchased?: boolean;
  };
  user_post: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    userId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `posts.id`.<fk table='posts' column='id'/>
     */
    postId: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description user_wishlist */
  "body.user_wishlist": definitions["user_wishlist"];
  /** Format: uuid */
  "rowFilter.user_wishlist.userId": string;
  /** Format: uuid */
  "rowFilter.user_wishlist.wishlistId": string;
  /** @description wishlists */
  "body.wishlists": definitions["wishlists"];
  /** Format: uuid */
  "rowFilter.wishlists.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.wishlists.created_at": string;
  /** Format: character varying */
  "rowFilter.wishlists.name": string;
  /** Format: uuid */
  "rowFilter.wishlists.created_by": string;
  /** @description wishlist_post */
  "body.wishlist_post": definitions["wishlist_post"];
  /** Format: uuid */
  "rowFilter.wishlist_post.wishlistId": string;
  /** Format: uuid */
  "rowFilter.wishlist_post.postId": string;
  /** @description posts_claimed */
  "body.posts_claimed": definitions["posts_claimed"];
  /** Format: uuid */
  "rowFilter.posts_claimed.userId": string;
  /** Format: uuid */
  "rowFilter.posts_claimed.postId": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: text */
  "rowFilter.users.email": string;
  /** Format: text */
  "rowFilter.users.name": string;
  /** @description posts */
  "body.posts": definitions["posts"];
  /** Format: uuid */
  "rowFilter.posts.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.posts.created_at": string;
  /** Format: text */
  "rowFilter.posts.name": string;
  /** Format: uuid */
  "rowFilter.posts.created_by": string;
  /** Format: text */
  "rowFilter.posts.price": string;
  /** Format: text */
  "rowFilter.posts.url": string;
  /** Format: text */
  "rowFilter.posts.description": string;
  /** Format: boolean */
  "rowFilter.posts.is_favorited": string;
  /** Format: boolean */
  "rowFilter.posts.is_purchased": string;
  /** @description user_post */
  "body.user_post": definitions["user_post"];
  /** Format: uuid */
  "rowFilter.user_post.userId": string;
  /** Format: uuid */
  "rowFilter.user_post.postId": string;
}

export interface operations {}

export interface external {}
